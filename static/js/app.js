function logRequest(reqUrl, response) {
  console.log(reqUrl, response);
  return response;
}

function onFetchResultsError(reqUrl, error) {
  console.error(reqUrl, error);
  return []; // return empty array on error
}

function fetchResults(url) {
  // http://lhorie.github.io/mithril/web-services.html
  return m.request({
    url: url,
    initialValue: [],
    unwrapSuccess: function (response) {
      return response.data;
    },
    unwrapError: function (response) {
      return response.error;
    }
  }).then(logRequest.bind(this, url))
    .catch(onFetchResultsError.bind(this, url));
}

function paliStartsWith(searchTerms) {
  var url = "/api/pali/starts_with/" + searchTerms;
  return fetchResults(url);
}

function paliContains(searchTerms) {
  var url = "/api/pali/contains/" + searchTerms;
  return fetchResults(url);
}

function myanmarContains(searchTerms) {
  var url = "/api/myanmar/contains/" + searchTerms;
  return fetchResults(url);
}

var App = {

  controller: function (args) {
    // these are getter-setter function generated by m.prop
    var pageTitle = m.prop("ပါဠိ မြန်မာ အဘိ​ဓာ​န​်");
    var searchTerms = m.prop('');
    var searchPlaceholder = m.prop('Search ...');
    var searchButtonText = m.prop('ရှာ');
    var searchOption = m.prop('paliStartsWith');
    var searchResults = m.prop([]);
    var keysLayout = m.prop(MY_KEYS_LAYOUT);
    var showEn = m.prop(true);
    var showPh = m.prop(false);

    function handleSearch(terms) {
      searchTerms(terms);
      switch (searchOption()) {
        case 'paliStartsWith':
          paliStartsWith(terms).then(searchResults);
          break;
      }
    }

    function handleClearSearch() {
      searchTerms('');
    }

    function handleSearchOptionChanged(option) {
      searchOption(option);
    }

    return {
      pageTitle: pageTitle,
      searchTerms: searchTerms,
      searchPlaceholder: searchPlaceholder,
      searchButtonText: searchButtonText,
      searchOption: searchOption,
      searchResults: searchResults,
      keysLayout: keysLayout,
      showEn: showEn,
      showPh: showPh,
      onSearch: handleSearch,
      onClearSearch: handleClearSearch,
      onSearchOptionChanged: handleSearchOptionChanged,
    }
  },

  view: function (ctrl) {
    return m(".container", [
      m("h1.title.my", ctrl.pageTitle()),
      m.component(SearchForm, {
        searchTerms: ctrl.searchTerms,
        searchPlaceholder: ctrl.searchPlaceholder,
        searchButtonText: ctrl.searchButtonText,
        onSearch: ctrl.onSearch,
        onClearSearch: ctrl.onClearSearch,
        onSearchOptionChanged: ctrl.onSearchOptionChanged
      }),
      m.component(MyanmarKeyboard, {
        // pass the value to the component
        keysLayout: ctrl.keysLayout,
        showEn: ctrl.showEn,
        showPh: ctrl.showPh,
      }),
      m.component(SearchResults, {
        searchTerms: ctrl.searchTerms,
        searchResults: ctrl.searchResults
      })
    ]);
  }
};

var SearchForm = {
  controller: function (args) {
    return {
      searchPlaceholder: args.searchPlaceholder,
      searchTerms: args.searchTerms,
      searchButtonText: args.searchButtonText,
      onClearSearch: args.onClearSearch,
      onSearch: args.onSearch,
    }
  },

  view: function (ctrl) {
    return m("form.search-wrapper", [
      m("input#search-box.my[type=search]", {
        placeholder: ctrl.searchPlaceholder(),
        autocomplete: 'off',
        autofocus: true,
        required: true,
        oninput: m.withAttr('value', ctrl.searchTerms),
        value: ctrl.searchTerms()
      }),
      ctrl.searchTerms() ?
        m("button.clear-search-icon.my[type=button]", {
            onclick: ctrl.onClearSearch
          },
          'x')
        :
        null
      ,
      m("button.search-btn.my[type=button]", {
          onclick: function () {
            ctrl.onSearch.bind(App)(ctrl.searchTerms());
            document.getElementById('search-box').focus();
          }
        },
        ctrl.searchButtonText())
    ]);
  }
};

var MyanmarKeyboard = {
  controller: function (args) {
    return {
      keysLayout: args.keysLayout,
      showEn: args.showEn,
      showPh: args.showPh,
    }
  },
  keygroupView: function (keygroup, showEn, showPh) {
    return m('ul.nwm-keygroup', [
      keygroup.map(function (k) {
        return k.my ?
          m('li.nwm-key', [
            showPh ? m('.nwm-ph', k.ph  || m.trust('&nbsp;')) : undefined,
            m('input.nwm-my[type=button]', {value: k.my || '-'}),
            showEn ? m('.nwm-en', k.en || m.trust('&nbsp;')) : undefined,
          ])
          :
          m('li.nwm-key.nwm-key-blank', [
            showPh ? m('.nwm-ph', m.trust('&nbsp;')) : undefined,
            m('input.nwm-my[type=button]', {value: '-'}),
            showEn ? m('.nwm-en', m.trust('&nbsp;')) : undefined,
          ])
      })
    ])
  },
  view: function (ctrl) {
    var self = this;

    return m('.nwm-container', [
      m('.nwm-left', [
        ctrl.keysLayout().left.map(function (keygroup) {
          return self.keygroupView(keygroup, ctrl.showEn(), ctrl.showPh());
        })
      ]),
      (ctrl.keysLayout().middle ?
        m('.nwm-middle', [
          ctrl.keysLayout().middle.map(function (keygroup) {
            return self.keygroupView(keygroup, ctrl.showEn(), ctrl.showPh());
          })
        ])
        :
        undefined),
      (ctrl.keysLayout().right ?
        m('.nwm-right', [
          ctrl.keysLayout().right.map(function (keygroup) {
            return self.keygroupView(keygroup, ctrl.showEn(), ctrl.showPh());
          })
        ])
        :
        undefined),
    ])
  }
};

var SearchResults = {
  controller: function (args) {
    return {
      searchResults: args.searchResults,
      searchTerms: args.searchTerms,
    }
  },
  view: function (ctrl) {
    var list = [];
    list = ctrl.searchResults().map(function (entry) {
      return list.concat([
        m("dt.term.my", [entry.pali]),
        m("dd.definition.my", [entry.mm])
      ]);
    });

    return m(".row.search-results", [
      list.length > 0 ? m("dl", list) : m('.not-found', ctrl.searchTerms() ? 'No entry found!' : '')
    ]);
  }
};

var MY_KEYS_LAYOUT = {
  left: [[
    {en: "ka",  my: "က"},
    {en: "kha", my: "ခ"},
    {en: "ga",  my: "ဂ"},
    {en: "gha", my: "ဃ"},
    {en: "nga", my: "င"},
  ], [
    {en: "ca",  my: "စ"},
    {en: "cha", my: "ဆ"},
    {en: "ja",  my: "ဇ"},
    {en: "jha", my: "ဈ"},
    {en: "na",  my: "ဉ", ph: "ña"},
    {en: "Na",  my: "ည", ph: "Ña"},
  ], [
    {en: "Ta",  my: "ဋ", ph: "Ṭa"},
    {en: "Tha", my: "ဌ", ph: "Ṭha"},
    {en: "Da",  my: "ဍ", ph: "Ḍa"},
    {en: "Dha", my: "ဎ", ph: "Ḍha"},
    {en: "Na",  my: "ဏ", ph: "Ṇa"},
  ], [
    {en: "ta",  my: "တ"},
    {en: "tha", my: "ထ"},
    {en: "da",  my: "ဒ"},
    {en: "dha", my: "ဓ"},
    {en: "na",  my: "န"},
  ], [
    {en: "pa",  my: "ပ"},
    {en: "pha", my: "ဖ"},
    {en: "ba",  my: "ဗ"},
    {en: "bha", my: "ဘ"},
    {en: "ma",  my: "မ"},
  ], [
    {en: "ya",  my: "ယ"},
    {en: "ra",  my: "ရ"},
    {en: "la",  my: "လ"},
    {en: "La",  my: "ဠ"},
    {en: "wa",  my: "ဝ"},
    {en: "ha",  my: "ဟ"},
    {en: "sa",  my: "သ"},
  ], [
    {en: "Ya",  my: "ျ"},
    {en: "Ra",  my: "ြ"},
    {},
    {},
    {en: "Wa",  my: "ွ"},
    {en: "Ha",  my: "ှ"},
    {en: "Sa",  my: "ဿ"},
  ],
  ],
  middle: [[
    {en: "v",   my: "္", des: "virama"},
  ],
  ],
  right: [[
    {},
    {en: 'a',   my: "အ", ph: "ā"},
    {en: "i",   my: "ဣ"},
    {en: 'ii',  my: "ဤ", ph: "ī", des: "long vowel of ဣ"},
    {en: "u",   my: "ဥ"},
    {en: 'uu',  my: "ဦ", ph: "ū", des: "long vowel of ဥ"},
  ], [
    {en: "A",   my: "ါ"},
    {en: "AA",  my: "ာ"},
    {en: "I",   my: "ိ"},
    {en: "II",  my: "ီ"},
    {en: "U",   my: "ု"},
    {en: "UU",  my: "ူ"},
  ], [
    {en: "ee",  my: "ေ"},
    {en: "e",   my: "ဧ"},
    {en: "o",   my: "ဩ"},
    {en: "oo",  my: "ဪ"},
    {en: "ai",  my: "ဲ"},
  ], [
    {en: "Nga", my: "င်္"},
    {en: "M",   my: "ံ", des: "anusvara"},
    {en: ".",   my: "့"},
    {en: ":",   my: "း", des: "visarga"},
    {},
    {en: ";",   my: "်"},
  ], [
    {en: "x",   my: "၊"},
    {en: "xx",  my: "။"},
    {en: "lo",  my: "၌"},
    {en: "g",   my: "၍"},
    {en: "gg",  my: "၎"},
    {en: "ge",  my: "၏"},
  ], [
    {en: "1",   my: "၁"},
    {en: "2",   my: "၂"},
    {en: "3",   my: "၃"},
    {en: "4",   my: "၄"},
    {en: "5",   my: "၅"},
  ], [
    {en: "6",   my: "၆"},
    {en: "7",   my: "၇"},
    {en: "8",   my: "၈"},
    {en: "9",   my: "၉"},
    {en: "0",   my: "၀"},
  ],
  ]
};

m.module(document.body, App);


// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map
// Production steps of ECMA-262, Edition 5, 15.4.4.19
// Reference: http://es5.github.io/#x15.4.4.19
if (!Array.prototype.map) {

  Array.prototype.map = function (callback, thisArg) {

    var T, A, k;

    if (this == null) {
      throw new TypeError(' this is null or not defined');
    }

    // 1. Let O be the result of calling ToObject passing the |this|
    //    value as the argument.
    var O = Object(this);

    // 2. Let lenValue be the result of calling the Get internal
    //    method of O with the argument "length".
    // 3. Let len be ToUint32(lenValue).
    var len = O.length >>> 0;

    // 4. If IsCallable(callback) is false, throw a TypeError exception.
    // See: http://es5.github.com/#x9.11
    if (typeof callback !== 'function') {
      throw new TypeError(callback + ' is not a function');
    }

    // 5. If thisArg was supplied, let T be thisArg; else let T be undefined.
    if (arguments.length > 1) {
      T = thisArg;
    }

    // 6. Let A be a new array created as if by the expression new Array(len)
    //    where Array is the standard built-in constructor with that name and
    //    len is the value of len.
    A = new Array(len);

    // 7. Let k be 0
    k = 0;

    // 8. Repeat, while k < len
    while (k < len) {

      var kValue, mappedValue;

      // a. Let Pk be ToString(k).
      //   This is implicit for LHS operands of the in operator
      // b. Let kPresent be the result of calling the HasProperty internal
      //    method of O with argument Pk.
      //   This step can be combined with c
      // c. If kPresent is true, then
      if (k in O) {

        // i. Let kValue be the result of calling the Get internal
        //    method of O with argument Pk.
        kValue = O[k];

        // ii. Let mappedValue be the result of calling the Call internal
        //     method of callback with T as the this value and argument
        //     list containing kValue, k, and O.
        mappedValue = callback.call(T, kValue, k, O);

        // iii. Call the DefineOwnProperty internal method of A with arguments
        // Pk, Property Descriptor
        // { Value: mappedValue,
        //   Writable: true,
        //   Enumerable: true,
        //   Configurable: true },
        // and false.

        // In browsers that support Object.defineProperty, use the following:
        // Object.defineProperty(A, k, {
        //   value: mappedValue,
        //   writable: true,
        //   enumerable: true,
        //   configurable: true
        // });

        // For best browser support, use the following:
        A[k] = mappedValue;
      }
      // d. Increase k by 1.
      k++;
    }

    // 9. return A
    return A;
  };
}