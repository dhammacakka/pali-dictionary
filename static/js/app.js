function logRequest(reqUrl, response) {
  console.log(reqUrl, response);
  return response;
}

function onFetchResultsError(reqUrl, error) {
  console.error(reqUrl, error);
  return []; // return empty array on error
}

function fetchResults(url) {
  // http://lhorie.github.io/mithril/web-services.html
  return m.request({
    url: url,
    initialValue: [],
    unwrapSuccess: function (response) {
      return response.data;
    },
    unwrapError: function (response) {
      return response.error;
    }
  }).then(logRequest.bind(this, url))
    .catch(onFetchResultsError.bind(this, url));
}

function paliStartsWith(searchTerms) {
  var url = "/api/pali/starts_with/" + searchTerms;
  return fetchResults(url);
}

function paliContains(searchTerms) {
  var url = "/api/pali/contains/" + searchTerms;
  return fetchResults(url);
}

function myanmarContains(searchTerms) {
  var url = "/api/myanmar/contains/" + searchTerms;
  return fetchResults(url);
}

var App = {

  controller: function (args) {
    // these are getter-setter function generated by m.prop
    var pageTitle = m.prop("ပါဠိ မြန်မာ အဘိ​ဓာ​န​်");
    var searchOption = m.prop('paliStartsWith');
    var searchTerms = m.prop('');
    var searchResults = m.prop([]);
    var showEn = m.prop(true);
    var showPh = m.prop(false);

    function handleSearch(terms) {
      searchTerms(terms);
      switch (searchOption()) {
        case 'paliStartsWith':
          paliStartsWith(terms).then(searchResults);
          break;
      }
    }

    function handleClearSearch() {
      searchTerms('');
    }

    function handleSearchOptionChanged(option) {
      searchOption(option);
    }

    return {
      pageTitle: pageTitle,
      searchOption: searchOption,
      searchTerms: searchTerms,
      searchResults: searchResults,
      showEn: showEn,
      showPh: showPh,
      onSearch: handleSearch,
      onClearSearch: handleClearSearch,
      onSearchOptionChanged: handleSearchOptionChanged,
    }
  },

  view: function (ctrl) {
    return m(".container", [
      m("h1.title.my", ctrl.pageTitle()),
      m.component(SearchForm, {
        onSearch: ctrl.onSearch,
        onClearSearch: ctrl.onClearSearch,
        onSearchOptionChanged: ctrl.onSearchOptionChanged
      }),
      m.component(MyanmarKeyboard, {
        // pass the value to the component
        showEn: ctrl.showEn(),
        showPh: ctrl.showPh(),
      }),
      m.component(SearchResults, {
        searchTerms: ctrl.searchTerms(),
        results: ctrl.searchResults()
      })
    ]);
  }
};

var SearchForm = {
  searchPlaceholder: m.prop('Search ...'),
  searchTerms: m.prop(''),
  searchButtonText: m.prop('ရှာ'),

  view: function (ctrl, args) {
    var self = this;
    var onClearSearch = args.onClearSearch;
    var onSearch = args.onSearch;

    return m("form.search-wrapper", [
      m("input#search-box.my[type=search]", {
        placeholder: this.searchPlaceholder(),
        autocomplete: 'off',
        autofocus: true,
        required: true,
        oninput: m.withAttr('value', this.searchTerms),
        value: this.searchTerms()
      }),
      this.searchTerms() ?
        m("button.clear-search-icon.my[type=button]", {
            onclick: function () {
              this.searchTerms('');
              onClearSearch.bind(App)();
            }.bind(this)
          },
          'x')
        :
        null
      ,
      m("button.search-btn.my[type=button]", {
          onclick: function () {
            onSearch.bind(App)(self.searchTerms());
            document.getElementById('search-box').focus();
          }
        },
        this.searchButtonText())
    ]);
  }
};

var MyanmarKeyboard = {
  keygroupView: function (keygroup, showEn) {
    return m('ul.nwm-keygroup', [
      keygroup.map(function (k) {
        return m('li', {class: k.my ? 'nwm-key' : 'nwm-key nwm-key-blank'}, [
          showEn ?
            m('div', k.en || '&nbsp;')
            :
            m('div', k.en || k.ph || '&nbsp;')
          ,
          m('input.nwm-my[type=button]', {value: k.my || ''})
        ])
      })
    ])
  },
  view: function (ctrl, args) {
    var self = this;
    var showEn = typeof args.showEn == 'undefined' ? 'true' : args.showEn;

    return m('.nwm-container', [
      m('.nwm-left', [
        MY_KEYS_LAYOUT.left.map(function (keygroup) {
          return self.keygroupView(keygroup, showEn);
        })
      ]),
      m('.nwm-middle', [
        MY_KEYS_LAYOUT.middle.map(function (keygroup) {
          return self.keygroupView(keygroup, showEn);
        })
      ]),
      m('.nwm-right', [
        MY_KEYS_LAYOUT.right.map(function (keygroup) {
          return self.keygroupView(keygroup, showEn);
        })
      ]),
    ])
  }
};

var SearchResults = {
  view: function (ctrl, args) {
    var results = args.results;
    var searchTerms = args.searchTerms;

    var list = [];
    list = results.map(function (entry) {
      return list.concat([
        m("dt.term.my", [entry.pali]),
        m("dd.definition.my", [entry.mm])
      ]);
    });

    return m(".row.search-results", [
      list.length > 0 ? m("dl", list) : m('.not-found', searchTerms ? 'No entry found!' : '')
    ]);
  }
};

var MY_KEYS_LAYOUT = {
  left: [[
    {en: "ka", my: "က"},
    {en: "kha", my: "ခ"},
    {en: "ga", my: "ဂ"},
    {en: "gha", my: "ဃ"},
    {en: "nga", my: "င"},
  ], [
    {en: "ca", my: "စ"},
    {en: "cha", my: "ဆ"},
    {en: "ja", my: "ဇ"},
    {en: "jha", my: "ဈ"},
    {en: "na", ph: "ña", my: "ဉ"},
    {en: "Na", ph: "Ña", my: "ည"},
  ], [
    {en: "Ta", ph: "Ṭa", my: "ဋ"},
    {en: "Tha", ph: "Ṭha", my: "ဌ"},
    {en: "Da", ph: "Ḍa", my: "ဍ"},
    {en: "Dha", ph: "Ḍha", my: "ဎ"},
    {en: "Na", ph: "Ṇa", my: "ဏ"},
  ], [
    {en: "ta", my: "တ"},
    {en: "tha", my: "ထ"},
    {en: "da", my: "ဒ"},
    {en: "dha", my: "ဓ"},
    {en: "na", my: "န"},
  ], [
    {en: "pa", my: "ပ"},
    {en: "pha", my: "ဖ"},
    {en: "ba", my: "ဗ"},
    {en: "bha", my: "ဘ"},
    {en: "ma", my: "မ"},
  ], [
    {en: "ya", my: "ယ"},
    {en: "ra", my: "ရ"},
    {en: "la", my: "လ"},
    {en: "La", my: "ဠ"},
    {en: "wa", my: "ဝ"},
    {en: "ha", my: "ဟ"},
    {en: "sa", my: "သ"},
  ], [
    {en: " ", my: "ျ"},
    {en: " ", my: "ြ"},
    {},
    {},
    {en: " ", my: "ွ"},
    {en: " ", my: "ှ"},
    {en: "Sa", my: "ဿ"},
  ],
  ],
  middle: [[
    {en: "virama", my: "္"},
  ],
  ],
  right: [[
    {},
    {en: "ā", my: "အ"},
    {en: "i", my: "ဣ"},
    {en: "ī", my: "ဤ"},
    {en: "u", my: "ဥ"},
    {en: "ū", my: "ဦ"},
  ], [
    {en: " ", my: "ါ"},
    {en: " ", my: "ာ"},
    {en: " ", my: "ိ"},
    {en: " ", my: "ီ"},
    {en: " ", my: "ု"},
    {en: " ", my: "ူ"},
  ], [
    {},
    {en: "e", my: "ဧ"},
    {en: "o", my: "ဩ"},
    {en: "oo", my: "ဪ"},
  ], [
    {},
    {en: " ", my: "ေ"},
    {},
    {},
    {en: " ", my: "ဲ"},
  ], [
    {},
    {en: " ", my: "ံ"},
    {en: " ", my: "့"},
    {en: " ", my: "း"},
    {},
    {en: " ", my: "်"},
  ], [
    {en: " ", my: "၊"},
    {en: " ", my: "။"},
    {en: " ", my: "၌"},
    {en: " ", my: "၍"},
    {en: " ", my: "၎"},
    {en: " ", my: "၏"},
  ], [
    {en: "1", my: "၁"},
    {en: "2", my: "၂"},
    {en: "3", my: "၃"},
    {en: "4", my: "၄"},
    {en: "5", my: "၅"},
  ], [
    {en: "6", my: "၆"},
    {en: "7", my: "၇"},
    {en: "8", my: "၈"},
    {en: "9", my: "၉"},
    {en: "0", my: "၀"},
  ],
  ]
};

m.module(document.body, App);


// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map
// Production steps of ECMA-262, Edition 5, 15.4.4.19
// Reference: http://es5.github.io/#x15.4.4.19
if (!Array.prototype.map) {

  Array.prototype.map = function (callback, thisArg) {

    var T, A, k;

    if (this == null) {
      throw new TypeError(' this is null or not defined');
    }

    // 1. Let O be the result of calling ToObject passing the |this|
    //    value as the argument.
    var O = Object(this);

    // 2. Let lenValue be the result of calling the Get internal
    //    method of O with the argument "length".
    // 3. Let len be ToUint32(lenValue).
    var len = O.length >>> 0;

    // 4. If IsCallable(callback) is false, throw a TypeError exception.
    // See: http://es5.github.com/#x9.11
    if (typeof callback !== 'function') {
      throw new TypeError(callback + ' is not a function');
    }

    // 5. If thisArg was supplied, let T be thisArg; else let T be undefined.
    if (arguments.length > 1) {
      T = thisArg;
    }

    // 6. Let A be a new array created as if by the expression new Array(len)
    //    where Array is the standard built-in constructor with that name and
    //    len is the value of len.
    A = new Array(len);

    // 7. Let k be 0
    k = 0;

    // 8. Repeat, while k < len
    while (k < len) {

      var kValue, mappedValue;

      // a. Let Pk be ToString(k).
      //   This is implicit for LHS operands of the in operator
      // b. Let kPresent be the result of calling the HasProperty internal
      //    method of O with argument Pk.
      //   This step can be combined with c
      // c. If kPresent is true, then
      if (k in O) {

        // i. Let kValue be the result of calling the Get internal
        //    method of O with argument Pk.
        kValue = O[k];

        // ii. Let mappedValue be the result of calling the Call internal
        //     method of callback with T as the this value and argument
        //     list containing kValue, k, and O.
        mappedValue = callback.call(T, kValue, k, O);

        // iii. Call the DefineOwnProperty internal method of A with arguments
        // Pk, Property Descriptor
        // { Value: mappedValue,
        //   Writable: true,
        //   Enumerable: true,
        //   Configurable: true },
        // and false.

        // In browsers that support Object.defineProperty, use the following:
        // Object.defineProperty(A, k, {
        //   value: mappedValue,
        //   writable: true,
        //   enumerable: true,
        //   configurable: true
        // });

        // For best browser support, use the following:
        A[k] = mappedValue;
      }
      // d. Increase k by 1.
      k++;
    }

    // 9. return A
    return A;
  };
}